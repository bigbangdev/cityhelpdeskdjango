"""
Django settings for cityhelpdesk project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import dj_database_url
from utility.annoying import get_str, get_bool, get_int

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

SECRET_KEY = get_str("SECRET_KEY", None)
DEBUG = get_bool("DEBUG", False)

ALLOWED_HOSTS = get_str("ALLOWED_HOSTS", "*").split(",")

#: Database configuration. Accepts a url-formatted access string to the
#: database. This populates ``DATABASES``. See also
#: `DATABASES <https://docs.djangoproject.com/en/1.9/ref/settings/#databases>`_
DATABASE_URL = get_str("DATABASE_URL", "postgres://localhost/cityhelpdesk")
DATABASES = {
    'default': dj_database_url.parse(DATABASE_URL, conn_max_age=None)
}

# Application definition

INSTALLED_APPS = [
    'suit',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',

    'rest_framework',
    'rest_framework.authtoken',
    'bootstrapform',
    'simplistic_auth',

    'accounts',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTH_USER_MODEL = 'auth.User'

ROOT_URLCONF = 'cityhelpdesk.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cityhelpdesk.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = (
    'accounts.backends.EmailBackend',
    'django.contrib.auth.backends.ModelBackend'
)

GS_ACCESS_KEY_ID = get_str("GS_ACCESS_KEY_ID", None)
GS_SECRET_ACCESS_KEY = get_str("GS_SECRET_ACCESS_KEY", None)
GS_STORAGE_BUCKET_NAME = get_str("GS_STORAGE_BUCKET_NAME", None)
GS_QUERYSTRING_AUTH = False

PUSH_NOTIFICATIONS_SETTINGS = {
    "GCM_API_KEY": get_str("GCM_API_KEY", None),
    "FCM_API_KEY": get_str("FCM_API_KEY", None),
    "APNS_CERTIFICATE": get_str("APNS_CERTIFICATE", None),
    "APNS_USE_SANDBOX": False
}

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'es-mx'

TIME_ZONE = 'America/Hermosillo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


EMAIL_BACKEND = "sgbackend.SendGridBackend"
EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_HOST_USER = 'apikey'
EMAIL_HOST_PASSWORD = get_str("SENDGRID_API_KEY", None)
EMAIL_PORT = 587
EMAIL_USE_TLS = True
SERVER_EMAIL = get_str("SUPPORT_EMAIL", None)
DEFAULT_FROM_EMAIL = SERVER_EMAIL
FROM_CONTACT_EMAIL = get_str("NO_REPLY_EMAIL", None)
CONTACT_EMAIL = FROM_CONTACT_EMAIL

SENDGRID_API_KEY = EMAIL_HOST_PASSWORD

ACCOUNT_ACTIVATION_DAYS = 6


STATIC_ROOT = get_str("STATIC_ROOT", '')
MEDIA_ROOT = get_str("MEDIA_ROOT", None)

STATIC_URL = get_str("STATIC_URL", None)
MEDIA_URL = get_str("MEDIA_URL", None)
STATICFILES_DIRS = get_str("STATICFILES_DIRS", "").split(",")

SITE_ID = 1


# CACHES = {
#     'default': {
#         'BACKEND': 'redis_cache.RedisCache',
#         'LOCATION': '/var/run/redis/redis.sock',
#     },
# }
# SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
CRONJOBS = [
    # ('* * * * *', 'ubicaciones.cron.get_locations'),
    # ('* * * * *', 'ubicaciones.cron.get_locations_delayed'),
    # ('* * * * *', 'ubicaciones.cron.get_locations_delayed_2'),
    # ('* * * * *', 'ubicaciones.cron.delete_locations')
]

# LOGIN_REDIRECT_URL = 'dashboard'
# LOGIN_URL = '/admin/login/?next=/'


CELERY_BROKER_BACKEND = "redis"
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_APP = 'cityhelpdesk'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'America/Phoenix'

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        # Log to a text file that can be rotated by logrotate
        'logfile': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': get_str("LOG_PATH", None),
            'maxBytes': 1024 * 1024 * 15,  # 15MB
            'backupCount': 10,
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins', 'logfile'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}
